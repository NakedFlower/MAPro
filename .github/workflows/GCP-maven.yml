name: Build and Deploy Spring Boot to GCP VM

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-deploy:
    runs-on: ubuntu-latest


    # ✅ 인증 → ✅ gcloud 설치 → ✅ JAR 전송 → ✅ SSH 실행
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Maven 빌드
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 4. Google Cloud 인증 (SA Key 사용)
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 5. gcloud CLI 설치
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: your-gcp-project-id
          install_components: beta

      # 6. JSON 키를 임시 파일로 저장 (scp/ssh 명령에서 필요)
      - name: Save GCP credentials to file
        # run: echo "${{ secrets.GCP_SA_KEY }}" > ${{ runner.temp }}/gcp-key.json
        run: echo "${{ secrets.GCP_SA_KEY }}" > $HOME/gcp-key.json


      # 7. JAR 파일 VM으로 복사
      - name: Copy JAR to VM
        run: |
          gcloud auth activate-service-account --key-file=${{ runner.temp }}/gcp-key.json
          gcloud compute scp target/MAPro-1.0.0.jar \
            yjin887@main-instance-20250811-054019:~/app/ \
            --zone=asia-northeast3-a

      # 8. Spring Boot 앱 재시작
      - name: Restart Spring Boot app on VM
        run: |
          gcloud auth activate-service-account --key-file=${{ runner.temp }}/gcp-key.json
          gcloud compute ssh yjin887@main-instance-20250811-054019 \
            --zone=asia-northeast3-a \
            --command="pkill -f 'java -jar' || true && nohup java -jar ~/app/MAPro-1.0.0.jar > app.log 2>&1 &"
